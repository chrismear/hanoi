#!/usr/bin/env ruby

# frozen_string_literal: true

require_relative '../lib/hanoi/solvers/iterative'
require_relative '../lib/hanoi/board'
require_relative '../lib/hanoi/printer'

def clear_screen
  puts "\e[H\e[2J"
end

def classes_in_module(mod)
  mod.constants.map { |c| mod.const_get(c) }.select { |c| c.is_a?(Class) }
end

puts 'Number of discs?'
disc_number = gets
disc_number = disc_number.strip.to_i

puts 'Available solvers:'
solver_classes = classes_in_module(Hanoi::Solvers)
solver_classes.each_with_index do |solver_class, index|
  puts "#{index + 1}. #{solver_class.name}"
end
puts 'Which solver?'
solver_number = gets.strip.to_i
solver_class = solver_classes[solver_number - 1]

solver = solver_class.new(Hanoi::Board.new(disc_number))

until solver.board.finished?
  clear_screen
  puts Hanoi::Printer.new(solver.board).print
  gets
  solver.step
end
clear_screen
puts Hanoi::Printer.new(solver.board).print
